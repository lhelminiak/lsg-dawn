{%comment%} Custom header component created by Luke H -- 5/11/22  {%endcomment%}

{%comment%} CSS {%endcomment%}


{{ 'component-custom-header.css' | asset_url | stylesheet_tag }}

<custom-header class="custom-header__wrapper">
    <header class="custom-header custom-header_transparent">

        <div>
            {% render 'custom-menu-button', menu_button_text: 'menu', default_color: 'white' %}
        </div>

        <div>
            <a href="{{ routes.root_url }}">
                <img
                    id="headerLogo"
                    src="{{ section.settings.logo | image_url: height: section.settings.logo_height }}"
                    loading="lazy"
                    width="auto"
                    height="100"
                    alt="{{ shop.name }}"
                />
            </a>
        </div>

        <div>
            {% render 'custom-cart-icon' %}
        </div>
    </header>
</custom-header>




{% javascript %}
    class CustomHeader extends HTMLElement {
        constructor(){
            super();
            
            // state

            // funcs
            this.handleScroll = this.handleScroll.bind(this);
            this.makeHeaderOpaque = this.makeHeaderOpaque.bind(this);
            this.makeHeaderTransparent = this.makeHeaderTransparent.bind(this);
            this.handleMenuOpen = this.handleMenuOpen.bind(this);


            // refs
            this.header = this.querySelector('header');
            this.headerCartIcon = this.querySelector('.custom-cart-icon')
            this.menuButton = this.querySelector('.custom-menu-button');
            this.headerLogo = this.querySelector('#headerLogo');

            


        }

        connectedCallback() {
            window.addEventListener('scroll', this.handleScroll, false);
            this.handleScroll();
            this.menuButton.addEventListener('click', this.handleMenuOpen);


        }

        disconnectedCallback() {
            window.removeEventListener('scroll', this.handleOnScroll);
        }


        handleScroll() {
            const amountScrolled = document.documentElement.scrollTop;
            console.log('amountScrolled', amountScrolled);
            if(amountScrolled >= 3){
                this.makeHeaderOpaque();
            } else {
                this.makeHeaderTransparent();
            }
        }

        handleMenuOpen() {
           
        }


        // when page is scrolled down from the top
        // transition header background to white
        // transition logo, menu and cart icon from white to black
        makeHeaderOpaque() {
            // change header background color to white
            this.header.classList.remove('custom-header_transparent');
            this.header.classList.add('custom-header_opaque');

            // change header menu button color
            this.menuButton.classList.remove('custom-menu-button_white');
            this.menuButton.classList.add('custom-menu-button_black');

            // change header logo color
            this.headerLogo.style.filter = "invert(1)";
            

            // change cart icon stoke color
            this.headerCartIcon.style.stroke = "black";

        }


        // when page is scrolled to, or is at the top 
        // transition header background to transparent
        // transition logo, menu and cart icon from black to white
        makeHeaderTransparent(){
            // change header background color to transparent
            this.header.classList.remove('custom-header_opaque');
            this.header.classList.add('custom-header_transparent');

            // change header menu button color
            this.menuButton.classList.remove('custom-menu-button_black');
            this.menuButton.classList.add('custom-menu-button_white');

            // change header logo color
            this.headerLogo.style.filter = "";

            // change cart icon stroke color
            this.headerCartIcon.style.stroke = "white";

        }

    }
    customElements.define('custom-header', CustomHeader);


    // custom menu button 
    class CustomMenuButton extends HTMLElement {
        constructor(){
            super();


            this.handleButtonClick = this.handleButtonClick.bind(this);

        
        }

        connectedCallback() {
            console.log('CustomMenuButton connected callback');
            this.querySelector('#customMenuButton').addEventListener('click', () => {
 
            });

        }

        disconnectedCallback() {
            console.log('CustomMenuButton disconnected callback');
        }



        handleMenuClick
    }
    customElements.define('custom-menu-button', CustomMenuButton);



{% endjavascript %}





{% schema %}
{
  "name": "Custom Header",
  "limit": 1,
  
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },

    {
        "type": "link_list",
        "id": "featured_product_links",
        "label": "Featured product links"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.header.settings.margin_bottom.label",
      "default": 0
    }
  ]
}
{% endschema %}