{%comment%} CSS {%endcomment%}
{{ 'component-custom-header.css' | asset_url | stylesheet_tag }}

<custom-header class="custom-header__wrapper">
    <header class="custom-header {% if template.name == 'index' %} custom-header-index custom-header_transparent {% else %} custom-header_opaque {% endif %}">
        <div>{% render 'custom-menu-button', menu_button_text: 'menu', default_color: 'white' %}</div>
        <div>
            <a href="{{ routes.root_url }}">
                <img
                    id="headerLogo"
                    src="{{ section.settings.logo | image_url: height: section.settings.logo_height }}"
                    loading="lazy"
                    width="auto"
                    height="100"
                    alt="{{ shop.name }}"
                />
            </a>
        </div>
        <div>{% render 'custom-cart-icon' %}</div>
    </header>
</custom-header>


<custom-menu>
    <div id="customMenu" class="custom-menu {%comment%} custom-menu_closed {%endcomment%} ">
        <div class="custom-menu__top">
            {% render 'custom-menu-button', menu_button_text: 'close', default_color: 'black' %}
        </div>

        <div class="custom-menu__main">
                {% if section.settings.featured_product_links.links != blank %}
                    {%- for link in section.settings.featured_product_links.links -%}
                        {% if forloop.first == true %}
                            <a href="{{ link.url }}" class="custom-menu__product-link">
                                <div>
                                    <img 
                                        src="{{ link.object.featured_image| image_url: height: 57 }}" 
                                        height="57"
                                        width="auto"
                                        alt="{{ link.title | escape }} link image"
                                    >
                                </div>
                                <div><span>{{ link.title | escape }}</span></div>
                                <div></div>
                            </a>
                        {% else %}
                            <a href="{{ link.url }}" class="custom-menu__product-link">
                                <div></div>
                                <div><span>{{ link.title | escape }}</span></div>
                                <div></div>
                            </a>
                        {% endif %}
                    {%- endfor -%}
                {% endif %}
            

            <div class="custom-menu__basic-link-container">
                {%- for link in section.settings.menu.links -%}
                    <a href="{{ link.url }}" class="custom-menu__basic-link">
                        {{ link.title | escape }}
                    </a>
                {%- endfor -%}
            </div>
        </div>
    </div>
</custom-menu>




{% javascript %}
    class CustomHeader extends HTMLElement {
        constructor(){
            super();
            // funcs
            this.handleScroll = this.handleScroll.bind(this);
            this.makeHeaderOpaque = this.makeHeaderOpaque.bind(this);
            this.makeHeaderTransparent = this.makeHeaderTransparent.bind(this);
            this.handleMenuOpen = this.handleMenuOpen.bind(this);
            this.handleCartOpen = this.handleCartOpen.bind(this);

            // refs
            this.header = this.querySelector('header');
            this.headerCartIcon = this.querySelector('.custom-cart-icon');

            this.menuButton = this.querySelector('.custom-menu-button');
            this.headerLogo = this.querySelector('#headerLogo');
            this.customDrawerMenu = document.querySelector('#customMenu');
            this.customCartDrawer = document.querySelector('#customCartDrawer');
        }

        connectedCallback() {
            window.addEventListener('scroll', this.handleScroll, false);
            this.handleScroll();
            this.menuButton.addEventListener('click', this.handleMenuOpen);
            this.headerCartIcon.addEventListener('click', this.handleCartOpen);

        }

        disconnectedCallback() {
            window.removeEventListener('scroll', this.handleOnScroll);
            this.menuButton.removeEventListener('click', this.handleMenuOpen);
            this.headerCartIcon.removeEventListener('click', this.handleCartOpen);
        }


        handleScroll() {
            const amountScrolled = document.documentElement.scrollTop;
            if(this.header.classList.contains('custom-header-index')){
                if(amountScrolled >= 3){
                    this.makeHeaderOpaque();
                } else {
                    this.makeHeaderTransparent();
                }
            } else {
                this.makeHeaderOpaque();
                return
            }   
        }

        handleMenuOpen() {
           this.customDrawerMenu.classList.add('custom-menu_open');
        }

        handleCartOpen(){
            this.customCartDrawer.classList.add('custom-cart-drawer_open');
        }


        // when page is scrolled down from the top
        // transition header background to white
        // transition logo, menu and cart icon from white to black
        makeHeaderOpaque() {
            // change header background color to white
            this.header.classList.remove('custom-header_transparent');
            this.header.classList.add('custom-header_opaque');
            // change header menu button color
            this.menuButton.classList.remove('custom-menu-button_white');
            this.menuButton.classList.add('custom-menu-button_black');
            // change header logo color
            this.headerLogo.style.filter = "invert(1)";
            // change cart icon stoke color
            this.headerCartIcon.style.stroke = "black";
        }


        // when page is scrolled to, or is at the top 
        // transition header background to transparent
        // transition logo, menu and cart icon from black to white
        makeHeaderTransparent(){
            // change header background color to transparent
            this.header.classList.remove('custom-header_opaque');
            this.header.classList.add('custom-header_transparent');
            // change header menu button color
            this.menuButton.classList.remove('custom-menu-button_black');
            this.menuButton.classList.add('custom-menu-button_white');
            // change header logo color
            this.headerLogo.style.filter = "";
            // change cart icon stroke color
            this.headerCartIcon.style.stroke = "white";
        }
    }
    customElements.define('custom-header', CustomHeader);





    class CustomMenu extends HTMLElement {
        constructor(){
            super();
            this.menuButton = this.querySelector('.custom-menu-button');
            this.customDrawerMenu = this.querySelector('#customMenu');
            this.handleMenuClose = this.handleMenuClose.bind(this);
            
        }

        connectedCallback() {
            this.menuButton.addEventListener('click', this.handleMenuClose);
        }


        disconnectedCallback() {
            this.menuButton.removeEventListener('click', this.handleMenuClose);
        }

        handleMenuClose() {
            // console.log('handleMenuClose')
            this.customDrawerMenu.classList.remove('custom-menu_open');
            // this.customDrawerMenu.classList.add('custom-menu_closed');
         }
    }

    customElements.define('custom-menu', CustomMenu)



{% endjavascript %}





{% schema %}
{
  "name": "Custom Header",
  "limit": 1,
  
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "t:sections.header.settings.logo.label"
    },

    {
        "type": "link_list",
        "id": "featured_product_links",
        "default": "main-menu",
        "label": "Featured product links"
    },
    {
      "type": "link_list",
      "id": "menu",
      "default": "main-menu",
      "label": "t:sections.header.settings.menu.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.spacing"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.header.settings.margin_bottom.label",
      "default": 0
    }
  ]
}
{% endschema %}